---
title: "(Day 01) Task : The Band Name Generator :-"
datePublished: Fri Apr 11 2025 14:26:03 GMT+0000 (Coordinated Universal Time)
cuid: cm9cvqsz9001a09l7cban5xbf
slug: day-01-task-the-band-name-generator
cover: https://cdn.hashnode.com/res/hashnode/image/upload/v1744381484998/997429d8-f2ce-470e-98f2-f0a5f3a8dff7.jpeg
tags: python, 100daysofcode, dr-angela-yu, python-data-types-string-manipulation-python-python-beginner-tutorial-python-for-beginners-learning-python-python-data-types-tutorial-python-type-conversion-python-type-checking-python-variables-python-input-function-python-code-examples-python-coding-exercises-python-programming-basics-python-mathematical-operations-python-string-operations-python-interactive-coding-exercises-python-bmi-calculator-python-tip-calculator-python-projects-for-beginners-python-100-days-of-code, python-100-days-of-code

---

## **üü© *1\. Introduction to Python :-***

* **Python is beginner-friendly:**  
    It has simple syntax (easy-to-read code) that looks similar to plain English, which makes it perfect for beginners.
    
* **Widely used language:**  
    Python is used in web development, data science, AI, automation, and more so learning it opens up many career paths.
    
* **Popular for teaching coding:**  
    Many schools and bootcamps, including Dr. Angela Yu‚Äôs course, use Python to teach foundational programming skills.
    
* **What you'll be doing in this course:**
    
    * Writing Python code daily for 100 days
        
    * Completing real-life projects to practice your skills
        
    * Gradually building confidence with each new topic
        
* **No prior experience needed:**  
    This course starts from the very basics, so even if you've never written a single line of code before you‚Äôre in the right place!
    

## **üü© *2\. How to Print in Python :-***

### **Use what you learnt to print out the words "Hello world!" with Python code :-**

* Remember that this is the format to print things in Python: ***print(" <mark>some text </mark> ").***
    
* Using the `print()` function.
    
* Printing text and strings to the console.
    

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1744377201727/d985d4df-57a0-4d9f-b053-d2b64e95f4d0.png align="center")

## üü© ***3\. What is String :-***

* A string is just text in Python.
    
* It's made up of letters, numbers, symbols, or spaces ‚Äî basically, anything you can type on a keyboard.
    
* You write a string by putting quotes around it i.e, combination of characters inside **(‚Äú ‚Äú) Double or (‚Äò ‚Äò) Single quotes**.
    

### **<mark>Learn to use string concatenation and </mark>** <mark>String Manipulation and New Lines</mark> **<mark> to format strings in Python :-</mark>**

### **String Manipulation and New Lines :-**

* How to format strings.
    
* Using `\n` to create line breaks.
    
* Example :-
    
    * Use \\n to add another line of "Hello world".
        
    * So the resulting output looks like this:
        
        Hello world!
        
        Hello world!
        
        Hello world!
        

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1744378382542/b2c0a6bf-ef62-47ab-99df-12792eb2eebe.png align="center")

### String Concatenation :-

* Combining strings using `+`.
    
* Creating meaningful outputs by joining multiple strings.
    
* Example :-
    
    * Add a space between the strings.
        
    * So there will be a space between the string Hello and Aditya when the print statement runs.
        
    * The output should look like this:
        
        Hello Aditya.
        

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1744378791242/9ef2df7c-0ddb-49e8-8724-56c91b25854e.png align="center")

## üü© ***4\. Using the Input() Function :-***

* Taking user input from the console.
    
* Assigning the input to variables.
    
* User can give data to the code.
    
* Example :-
    
    * Update the code to add an exclamation mark Using what you have learnt in this lesson and previous, can you figure out how take user input and slot it in between 2 strings?
        

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1744379184742/8dd42289-8f46-47a6-8222-daadd678dc5f.png align="center")

## üü© ***5\. Variables and Naming Conventions :-***

* #### What is a variable?
    
    * A variable is like a container or box that holds information.
        
    * You can give it a name, and store a value inside it (like text or a number).
        
    * You can use that name later to get or change the value.
        
    * It is used to assign a value so that we can access data by using variable.
        
    * it is like giving a name to any data.
        
    * Example :-
        
        * Check the length of the user input.
            
        * Split everything into variables.
            
    

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1744379994882/030669bf-7531-4029-af3a-4a00fcb47158.png align="left")

* ***Rules For naming variables in Python :-***
    
    * Make sure your variable names are descriptive.
        
    * Don't have spaces between words.
        
    * Don't start with numbers.
        
    * Don't use special words like print or input.
        
    * Choose simple words that are less likely to become typos.
        
    * Check the company style guidelines if you start work at a company.
        

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1744380264508/b538a25d-9615-47c1-9502-e10db9766b4f.png align="center")

## üü© ***6\. üé∏ The Band Name Generator Project :-***

### Step 1: Greet the user.

* Start by printing a welcome message.
    

### Step 2: Ask for the City Name.

* `Goal:` Get the city the user grew up in.
    
* `input()` takes the user‚Äôs input.
    
* `\n` moves the cursor to the next line for cleaner formatting.
    

### Step 3: Ask for the Pet‚Äôs Name.

* `Goal:` Get the name of the user's pet.
    
* This will be combined with the city name for the band name.
    

### Step 4: Combine the Inputs.

* `Goal:` Create the band name by joining the city and pet names.
    
* We use `" "` (a space) between the two inputs to separate them visually.
    

### Step 5: Display the Result.

* `Goal:` Show the final band name to the user.
    

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1744381127703/2c10e004-5849-40c7-adcd-52ad897b05f7.png align="center")

# ‚úÖ **Conclusion ‚Äì Day 01: The Band Name Generator :-**

### üîç **What We Learned Today:**

* How to use the `print()` function to display messages.
    
* How to Combine `(concatenate)` strings to create custom outputs.
    
* How to take input from a user using `input()`.
    
* How to store data in Variables & Variable Naming.
    
* How to build a simple and fun interactive program.
    

### üöÄ **What's Next?**

* Tomorrow‚Äôs challenge will build upon what we learned today.
    
* Each day will gradually introduce new concepts to strengthen our Python skills.
    
* We‚Äôre officially on our 100 Days of Code journey ‚Äî keep up the momentum!
